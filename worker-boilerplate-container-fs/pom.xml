<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017-2020 Micro Focus or one of its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.cafdataprocessing</groupId>
        <artifactId>boilerplate-service-aggregator</artifactId>
        <version>2.4.0-SNAPSHOT</version>
    </parent>

    <groupId>com.github.cafdataprocessing</groupId>
    <artifactId>worker-boilerplate-container-fs</artifactId>
    <packaging>pom</packaging>

    <properties>
        <caf.worker-store.impl>worker-store-fs</caf.worker-store.impl>
        <caf.config.impl>config-file</caf.config.impl>
        <caf.codec.impl>codec-json</caf.codec.impl>
        <caf.worker-queue.impl>worker-queue-rabbit</caf.worker-queue.impl>
        <deployFileUrl>${project.distributionManagement.snapshotRepository.url}</deployFileUrl>
        <repositoryId>${project.distributionManagement.snapshotRepository.id}</repositoryId>

        <!-- location of test data to be used by tests ran via worker-tester framework -->
        <test.data>${project.basedir}/test-data</test.data>
        <tests.binary.content.location>${test.data}</tests.binary.content.location>

        <!-- specify boilerplate database name for integration tests -->
        <boilerplate.db.name>boilerplate</boilerplate.db.name>

        <boilerplate.hibernate.connectionstring>
            jdbc:postgresql://boilerplate-integrationtests-postgres:${postgres.db.port}/${boilerplate.db.name}
        </boilerplate.hibernate.connectionstring>

        <boilerplate.db.user>postgres</boilerplate.db.user>
        <boilerplate.db.pass>root</boilerplate.db.pass>

        <db.connection>jdbc:postgresql://boilerplate-integrationtests-postgres:${postgres.db.port}</db.connection>

        <failsafe.timeout>150000</failsafe.timeout>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.github.cafapi</groupId>
            <artifactId>caf-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.cafdataprocessing</groupId>
            <artifactId>worker-boilerplate</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>javax.ws.rs</groupId>
                    <artifactId>jsr311-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>${caf.worker-store.impl}</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.sun.jersey</groupId>
                    <artifactId>jersey-server</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.config</groupId>
            <artifactId>${caf.config.impl}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.decoder</groupId>
            <artifactId>decoder-js</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>${caf.worker-queue.impl}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.codec</groupId>
            <artifactId>${caf.codec.impl}</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.cafdataprocessing</groupId>
            <artifactId>util-email-content-segregation-script</artifactId>
            <type>tar.gz</type>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-testing-util</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-testing-integration</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafdataprocessing</groupId>
            <artifactId>worker-boilerplate-testing</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>use-default-fixed-ports</id>
            <properties>
                <worker.adminport>8081</worker.adminport>
                <rabbitmq.node.port>5672</rabbitmq.node.port>
                <rabbitmq.ctrl.port>15672</rabbitmq.ctrl.port>

                <boilerplate.adminport>5555</boilerplate.adminport>
                <postgres.db.port>5432</postgres.db.port>
            </properties>
        </profile>

        <profile>
            <id>nightly-test</id>
            <activation>
                <property>
                    <name>RE_BUILD_TYPE</name>
                    <value>release</value>
                </property>
            </activation>
            <properties>
                <test.data>${project.basedir}/testcases/automated/boilerplate-worker</test.data>
                <!-- A property is created by the windows or linux nightly tests profiles to allow the nightly tests to pick
                up binary content files from a remote location e.g. test.binary.content.basedir=/mnt/test-sources/ -->
                <test.binary.content.location>${test.binary.content.basedir}boilerplate-test-data</test.binary.content.location>
                <failsafe.timeout>120000</failsafe.timeout>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven.failsafe.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <!-- properties used by worker-tester integration test framework -->
                        <docker.host.address>${docker.host.address}</docker.host.address>
                        <worker.adminport>${worker.adminport}</worker.adminport>
                        <rabbitmq.node.port>${rabbitmq.node.port}</rabbitmq.node.port>
                        <rabbitmq.ctrl.port>${rabbitmq.ctrl.port}</rabbitmq.ctrl.port>
                        <input.folder>${test.data}</input.folder>
                        <expected.folder>${test.data}</expected.folder>
                        <test.sourcefile.base.folder>${test.binary.content.location}</test.sourcefile.base.folder>
                        <datastore.enabled>false</datastore.enabled>

                        <!-- boilerplate setup specific properties -->
                        <boilerplate.adminport>${boilerplate.adminport}</boilerplate.adminport>
                        <postgres.db.port>${postgres.db.port}</postgres.db.port>
                        <timeout.ms>${failsafe.timeout}</timeout.ms>
                    </systemPropertyVariables>
                    <environmentVariables>
                        <CAF_APPNAME>test/worker-boilerplate</CAF_APPNAME>
                        <CAF_CONFIG_PATH>${project.basedir}/test-configs</CAF_CONFIG_PATH>
                        <CAF_INTEGRATIONTESTS_FS_PATH>\\${docker.host.address}@${webdav.apache.port}\webdav</CAF_INTEGRATIONTESTS_FS_PATH>
                        <!-- Environment variables needed for old style tests-->
                        <rabbit.port>${rabbitmq.node.port}</rabbit.port>
                        <rabbit.host>${docker.host.address}</rabbit.host>

                        <!-- boilerplate api database connection details -->
                        <hibernate.connectionstring>
                            ${boilerplate.hibernate.connectionstring}
                        </hibernate.connectionstring>
                        <hibernate.user>${boilerplate.db.user}}</hibernate.user>
                        <hibernate.password>${boilerplate.db.pass}</hibernate.password>
                    </environmentVariables>
                    <!--<debugForkedProcess>true</debugForkedProcess>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>testResources</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>process-config-files</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/config-files</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/config</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.10</version>
                <executions>
                    <execution>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                    <!-- Unpack the base worker configuration files -->
                    <execution>
                        <id>process-config-files</id>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.github.workerframework</groupId>
                                    <artifactId>worker-default-configs</artifactId>
                                    <outputDirectory>${project.build.directory}/config-files</outputDirectory>
                                    <excludes>META-INF/**,cfg*StorageServiceDataStore*</excludes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${fabric8.docker.maven.version}</version>
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>upload-docker-container</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <filter>boilerplate-worker</filter>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <verbose>true</verbose>
                    <autoPull>on</autoPull>
                    <logDate>default</logDate>
                    <images>
                        <image>
                            <alias>webdav</alias>
                            <name>${dockerHubPublic}/cloudesire/webdav</name>
                            <run>
                                <volumes>
                                    <bind>
                                        <volume>/srv/common/webdav</volume>
                                    </bind>
                                </volumes>
                                <ports>
                                    <port>${webdav.apache.port}:8080</port>
                                </ports>
                                <env>
                                    <APACHE_PORT>8080</APACHE_PORT>
                                </env>
                                <wait>
                                    <log>WebDAV Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${webdav.apache.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- Start Rabbit image -->
                        <image>
                            <alias>rabbitmq</alias>
                            <name>${dockerHubPublic}/library/rabbitmq:3-management</name>
                            <run>
                                <ports>
                                    <port>${rabbitmq.ctrl.port}:15672</port>
                                    <port>${rabbitmq.node.port}:5672</port>
                                </ports>
                                <wait>
                                    <log>Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${rabbitmq.ctrl.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- End Rabbit image -->
                        <!-- Start Config image -->
                        <image>
                            <alias>config</alias>
                            <name>${project.artifactId}-test-config:${project.version}</name>
                            <build>
                                <from>${dockerHubPublic}/library/busybox:latest</from>
                                <assembly>
                                    <basedir>/config</basedir>
                                    <exportTargetDir>true</exportTargetDir>
                                    <inline>
                                        <fileSets>
                                            <fileSet>
                                                <directory>${project.basedir}/test-configs</directory>
                                                <outputDirectory>/</outputDirectory>
                                                <includes>
                                                    <include>*</include>
                                                </includes>
                                            </fileSet>
                                        </fileSets>
                                    </inline>
                                </assembly>
                            </build>
                        </image>
                        <!-- End Config image -->

                        <!-- Begin Boilerplate Database image -->
                        <image>
                            <alias>boilerplate-integrationtests-postgres</alias>
                            <name>${dockerHubPublic}/library/postgres:11</name>
                            <run>
                                <ports>
                                    <port>${postgres.db.port}:5432</port>
                                </ports>
                                <env>
                                    <POSTGRES_PASSWORD>${boilerplate.db.pass}</POSTGRES_PASSWORD>
                                    <POSTGRES_USER>${boilerplate.db.user}</POSTGRES_USER>
                                    <POSTGRES_DB>${boilerplate.db.name}</POSTGRES_DB>
                                </env>
                                <wait>
                                    <log>PostgreSQL init process complete</log>
                                    <time>50000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- End Boilerplate Database image -->

                        <!-- Begin Boilerplate db install image -->
                        <image>
                            <alias>boilerplate-liquibase-container</alias>
                            <name>${cafBoilerplateDbInstallerContainerName}</name>
                            <run>
                                <links>
                                    <link>boilerplate-integrationtests-postgres</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <cmd>java -jar /boilerplate-db.jar -fd -db.user ${boilerplate.db.user} -db.pass ${boilerplate.db.pass} -db.name ${boilerplate.db.name} -db.connection jdbc:postgresql://boilerplate-integrationtests-postgres:5432 -log debug
                                </cmd>
                                <wait>
                                    <log>DB update finished.</log>
                                    <time>60000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <!-- End Boilerplate db install image -->

                        <!-- Begin Boilerplate API image -->
                        <image>
                            <alias>boilerplate-api</alias>
                            <name>${cafBoilerplateApiContainerName}</name>
                            <run>
                                <ports>
                                    <port>${boilerplate.adminport}:8080</port>
                                </ports>
                                <env>
                                    <hibernate.connectionstring>
                                        jdbc:postgresql://boilerplate-integrationtests-postgres:5432/${boilerplate.db.name}
                                    </hibernate.connectionstring>
                                    <hibernate.user>${boilerplate.db.user}</hibernate.user>
                                    <hibernate.password>${boilerplate.db.pass}</hibernate.password>
                                </env>
                                <links>
                                    <link>boilerplate-integrationtests-postgres</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <wait>
                                    <http>
                                        <url>
                                            http://${docker.host.address}:${boilerplate.adminport}/boilerplateapi/boilerplate/checkhealth?project_id=1
                                        </url>
                                    </http>
                                    <time>50000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <!-- End Boilerplate API image -->

                        <!-- Start input data volume -->
                        <image>
                            <alias>util-data</alias>
                            <name>${project.artifactId}-test-data:${project.version}</name>
                            <build>
                                <from>${dockerHubPublic}/library/busybox:latest</from>
                                <assembly>
                                    <basedir>/util-data</basedir>
                                    <exportTargetDir>true</exportTargetDir>
                                    <inline>
                                        <fileSets>
                                            <fileSet>
                                                <directory>${project.basedir}/util-data/test-input</directory>
                                                <outputDirectory>/test-input</outputDirectory>
                                                <includes>
                                                    <include>*</include>
                                                </includes>
                                            </fileSet>
                                        </fileSets>
                                    </inline>
                                </assembly>
                            </build>
                        </image>
                        <!-- End input data volume -->

                        <!-- Begin Boilerplate Creation image -->
                        <image>
                            <alias>boilerplate-creation-container</alias>
                            <name>${cafBoilerplateCreationContainerName}</name>
                            <run>
                                <links>
                                    <link>boilerplate-api</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <cmd>java -Dboilerplateapi.url=http://boilerplate-api:8080/boilerplateapi -Dfile.input=/util-data/test-input/creation-data.json -Dfile.output=/util-data/test-output/creation-output.json -jar util-boilerplate-creation.jar
                                </cmd>
                                <volumes>
                                    <from>
                                        <image>util-data</image>
                                    </from>
                                </volumes>
                                <wait>
                                    <log>Creation completed successfully</log>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <!-- End Boilerplate Creation image -->

                        <!-- Begin Boilerplate Worker image -->
                        <image>
                            <alias>boilerplate-worker</alias>
                            <name>${cafBoilplateWorkerContainerName}</name>
                            <build>
                                <from>${dockerHubPublic}/cafapi/opensuse-jeptalon:3</from>
                                <ports>
                                    <port>8080</port>
                                    <port>8081</port>
                                    <!--<port>5050</port>-->
                                </ports>
                                <labels>
                                    <caf.worker-framework.version>${caf.worker-framework.version}
                                    </caf.worker-framework.version>
                                    <caf.worker-queue.impl>${caf.worker-queue.impl}</caf.worker-queue.impl>
                                    <caf.worker-store.impl>${caf.worker-store.impl}</caf.worker-store.impl>
                                    <caf.config.impl>${caf.config.impl}</caf.config.impl>
                                    <caf.codec.impl>${caf.codec.impl}</caf.codec.impl>
                                </labels>
                                <healthCheck>
                                    <cmd>curl -f http://localhost:8081/healthcheck || exit 1</cmd>
                                </healthCheck>
                                <cmd>/maven/worker.sh</cmd>
                                <assembly>
                                    <mode>tar</mode>
                                    <inline>
                                        <fileSets>
                                            <fileSet>
                                                <lineEnding>unix</lineEnding>
                                                <includes>
                                                    <include>worker.sh</include>
                                                </includes>
                                                <fileMode>0755</fileMode>
                                            </fileSet>
                                            <fileSet>
                                                <lineEnding>unix</lineEnding>
                                                <includes>
                                                    <include>*.yaml</include>
                                                </includes>
                                            </fileSet>
                                            <fileSet>
                                                <directory>${project.build.directory}/config-files</directory>
                                                <outputDirectory>config</outputDirectory>
                                            </fileSet>
                                        </fileSets>
                                        <dependencySets>
                                            <dependencySet>
                                                <useProjectArtifact>false</useProjectArtifact>
                                                <scope>runtime</scope>
                                                <excludes>
                                                    <exclude>com.github.cafdataprocessing:util-email-content-segregation-script</exclude>
                                                </excludes>
                                            </dependencySet>
                                            <dependencySet>
                                                <useProjectArtifact>false</useProjectArtifact>
                                                <useTransitiveFiltering>true</useTransitiveFiltering>
                                                <unpack>true</unpack>
                                                <includes>
                                                    <include>com.github.cafdataprocessing:util-email-content-segregation-script</include>
                                                </includes>
                                            </dependencySet>
                                        </dependencySets>
                                    </inline>
                                </assembly>
                            </build>
                            <run>
                                <ports>
                                    <port>${worker.adminport}:8081</port>
                                    <port>${remote.debug}:5005</port>
                                </ports>
                                <env>
                                    <CAF_APPNAME>test/worker-boilerplate</CAF_APPNAME>
                                    <CAF_CONFIG_PATH>/config</CAF_CONFIG_PATH>
                                    <!--<_JAVA_OPTIONS>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005</_JAVA_OPTIONS>-->
                                </env>
                                <volumes>
                                    <from>
                                        <image>config</image>
                                        <image>webdav</image>
                                    </from>
                                </volumes>
                                <links>
                                    <link>rabbitmq</link>
                                    <link>boilerplate-api</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${worker.adminport}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                        <!-- End Boilerplate Worker image -->
                    </images>
                </configuration>
            </plugin>
            
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <configuration>
                    <excludes combine.children="append">
                        <exclude>testcases/**</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
